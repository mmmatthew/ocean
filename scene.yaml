scene:
    animated: true

sources:
    osm: 
        type: TopoJSON
        url: https://vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
        max_zoom: 16
    normals:
        type: Raster
        url: https://terrain-preview.mapzen.com/normal/{z}/{x}/{y}.png
        max_zoom: 14
    mapquest-open-aerial:
        type: Raster
        url: http://otile2.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg
        max_zoom: 14
    stamen-terrain:
        type: Raster
        url: http://a.tile.stamen.com/terrain-background/{z}/{x}/{y}.jpg
    mapbox-outdoors:
        type: Raster
        url: https://api.mapbox.com/styles/v1/mapbox/outdoors-v9/tiles/256/{z}/{x}/{y}?access_token=
    mapbox-satellite:
        type: Raster
        url: https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/256/{z}/{x}/{y}?access_token=
    elevation:
        type: Raster
        url: https://terrain-preview.mapzen.com/terrarium/{z}/{x}/{y}.png
        max_zoom: 14

cameras:
    perspective:
        type: perspective
        vanishing_point: [0, -500]

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .3
        ambient: 1
styles: 
    terrain:
        base: raster
        shaders:
            uniforms:
                u_scale: 1.
            blocks:
                normal: |
                    normal = (color.rgb-.5)*2.;
                    normal.z = normal.z / u_scale;
                color: |
                    color.rgb = vec3(1.0) * u_scale;
                    color.rgb = max(color.rgb, .5);
                    color.a = 1.0;
 
    water:
        base: raster
        raster: custom
        blend: inlay
        shaders:
            uniforms:
                water_level: 0.
            blocks:
                global: |
                    float unpack(vec4 h) {
                        // return (h.r * 1. + h.g / 256. + h.b / 65536.)*50.-25.;
                        return (h.r * 256.  + h.g * 1.  + h.b / 256. - 128.5) * 256.;
                        // return (h.r * 1.  + h.g / 256.  + h.b / 65536. - 128.);
                    }
                color: |
                    float height = unpack(sampleRaster(0));
                    color = vec4(1.0);
                    
                    color.rgb = vec3(0.07, 0.22, 0.4);
                    // Color ramps
                    if(height > water_level ) {
                        color.rgb = vec3(1.0);
                        color.a = 0.;
                    } else {
                        float depth = (water_level - height);
                        color.a = mix(0.3, 1., depth/5.);
                    }

    buildings:
        base: polygons
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((v_world_position.z*.001 + .6),1.));
layers:
    # terrain:
    #     data: { source: normals, layer: _default }
    #     draw:
    #         terrain:
    #             order: 0
    terrain:
        data: { source: mapquest-open-aerial }
        draw:
            raster:
                order: 0 # draw on bottom
    water:
        data: { source: elevation}
        draw:
            water:
                order: 1

    earth:
        data: { source: osm }
        draw:
            lines: 
                order: 2
                color: [.3, .3, .3]
                width: 1px

    places:
        data: { source: osm}
        filter: 
            kind: [city]
        draw:
            text:
                font:
                    fill: white
                    size: 16px
                    stroke: { color: '#444', width: 4px}

    buildings:
        data: { source: osm }
        draw:
            polygons:
                order: function() { return feature.sort_key; }
                color: '#fff'

        extruded:
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }
